// =============================================
// Global State
// =============================================
let isAnalyzing = false;
let currentResults = null;

// =============================================
// DOM Elements
// =============================================
const elements = {
    form: document.getElementById('analysisForm'),
    topicInput: document.getElementById('topic'),
    articlesInput: document.getElementById('noofarticles'),
    articleCountDisplay: document.getElementById('articleCountDisplay'),
    analyzeBtn: document.getElementById('analyzeBtn'),
    loadingSection: document.getElementById('loadingSection'),
    resultsSection: document.getElementById('resultsSection'),
    resultsContent: document.getElementById('resultsContent'),
    resultsSubtitle: document.getElementById('resultsSubtitle'),
    newAnalysisBtn: document.getElementById('newAnalysisBtn'),
    copyResultsBtn: document.getElementById('copyResultsBtn'),
    apiStatus: document.getElementById('apiStatus'),
    toast: document.getElementById('toast'),
    toastMessage: document.getElementById('toastMessage'),
    loadingText: document.getElementById('loadingText'),
    steps: {
        step1: document.getElementById('step1'),
        step2: document.getElementById('step2'),
        step3: document.getElementById('step3')
    }
};

// =============================================
// Initialization
// =============================================
document.addEventListener('DOMContentLoaded', () => {
    initializeEventListeners();
    checkAPIHealth();
    
    // Check API health every 30 seconds
    setInterval(checkAPIHealth, 30000);
});

// =============================================
// Event Listeners
// =============================================
function initializeEventListeners() {
    // Form submission
    elements.form.addEventListener('submit', handleFormSubmit);
    
    // Range input
    elements.articlesInput.addEventListener('input', (e) => {
        elements.articleCountDisplay.textContent = e.target.value;
    });
    
    // Action buttons
    elements.newAnalysisBtn.addEventListener('click', resetForm);
    elements.copyResultsBtn.addEventListener('click', copyResults);
    
    // Smooth scroll for anchor links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', (e) => {
            e.preventDefault();
            const target = document.querySelector(anchor.getAttribute('href'));
            if (target) {
                target.scrollIntoView({ behavior: 'smooth', block: 'start' });
            }
        });
    });
}

// =============================================
// API Health Check
// =============================================
async function checkAPIHealth() {
    try {
        const response = await fetch('/api/health');
        const data = await response.json();
        
        if (data.status === 'healthy') {
            updateAPIStatus(true);
        } else {
            updateAPIStatus(false);
        }
    } catch (error) {
        updateAPIStatus(false);
    }
}

function updateAPIStatus(isHealthy) {
    const statusDot = elements.apiStatus.querySelector('.status-dot');
    
    if (isHealthy) {
        statusDot.classList.remove('error');
        elements.apiStatus.title = 'API is healthy';
    } else {
        statusDot.classList.add('error');
        elements.apiStatus.title = 'API connection error';
    }
}

// =============================================
// Form Handling
// =============================================
async function handleFormSubmit(e) {
    e.preventDefault();
    
    if (isAnalyzing) return;
    
    const topic = elements.topicInput.value.trim();
    const noofarticles = parseInt(elements.articlesInput.value);
    
    if (!topic) {
        showToast('Please enter a topic', 'error');
        return;
    }
    
    await performAnalysis(topic, noofarticles);
}

async function performAnalysis(topic, noofarticles) {
    isAnalyzing = true;
    
    // Hide results, show loading
    elements.resultsSection.classList.add('hidden');
    elements.loadingSection.classList.remove('hidden');
    
    // Update button state
    elements.analyzeBtn.disabled = true;
    elements.analyzeBtn.querySelector('.btn-text').textContent = 'Analyzing...';
    
    // Animate loading steps
    animateLoadingSteps();
    
    try {
        const response = await fetch('/api/analyze', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                topic: topic,
                noofarticles: noofarticles
            })
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.detail || 'Analysis failed');
        }
        
        const data = await response.json();
        
        if (data.success) {
            currentResults = data;
            displayResults(data);
            showToast('Analysis completed successfully!', 'success');
        } else {
            throw new Error('Analysis failed');
        }
        
    } catch (error) {
        console.error('Analysis error:', error);
        showToast(error.message || 'An error occurred during analysis', 'error');
        resetForm();
    } finally {
        isAnalyzing = false;
        elements.analyzeBtn.disabled = false;
        elements.analyzeBtn.querySelector('.btn-text').textContent = 'Analyze Sentiment';
        elements.loadingSection.classList.add('hidden');
        resetLoadingSteps();
    }
}

// =============================================
// Loading Animation
// =============================================
function animateLoadingSteps() {
    const steps = [elements.steps.step1, elements.steps.step2, elements.steps.step3];
    const messages = [
        'Searching for relevant articles...',
        'Reading and processing content...',
        'Analyzing sentiment and generating insights...'
    ];
    
    let currentStep = 0;
    
    const interval = setInterval(() => {
        if (currentStep < steps.length) {
            // Activate current step
            steps[currentStep].classList.add('active');
            elements.loadingText.textContent = messages[currentStep];
            currentStep++;
        } else {
            // Loop back to first step
            steps.forEach(step => step.classList.remove('active'));
            currentStep = 0;
        }
        
        if (!isAnalyzing) {
            clearInterval(interval);
        }
    }, 3000);
}

function resetLoadingSteps() {
    Object.values(elements.steps).forEach(step => {
        step.classList.remove('active');
    });
}

// =============================================
// Results Display
// =============================================
function displayResults(data) {
    // Update subtitle
    elements.resultsSubtitle.textContent = `Analysis of ${data.articles_analyzed} articles about "${data.topic}"`;
    
    // Format and display analysis
    const formattedAnalysis = formatMarkdownToHTML(data.analysis);
    elements.resultsContent.innerHTML = formattedAnalysis;
    
    // Show results section
    elements.resultsSection.classList.remove('hidden');
    
    // Scroll to results
    elements.resultsSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
}

function formatMarkdownToHTML(markdown) {
    if (!markdown) return '<p>No results available.</p>';
    
    let html = markdown;
    
    // Headers
    html = html.replace(/^### (.*$)/gim, '<h3>$1</h3>');
    html = html.replace(/^## (.*$)/gim, '<h2>$1</h2>');
    html = html.replace(/^# (.*$)/gim, '<h2>$1</h2>');
    
    // Bold and italic
    html = html.replace(/\*\*\*(.+?)\*\*\*/g, '<strong><em>$1</em></strong>');
    html = html.replace(/\*\*(.+?)\*\*/g, '<strong>$1</strong>');
    html = html.replace(/\*(.+?)\*/g, '<em>$1</em>');
    
    // Links
    html = html.replace(/\[([^\]]+)\]\(([^\)]+)\)/g, '<a href="$2" target="_blank" rel="noopener noreferrer">$1</a>');
    
    // Lists - improved handling
    html = html.replace(/^\* (.+)$/gim, '<li>$1</li>');
    html = html.replace(/^- (.+)$/gim, '<li>$1</li>');
    html = html.replace(/^\d+\. (.+)$/gim, '<li>$1</li>');
    
    // Wrap consecutive list items in ul/ol
    html = html.replace(/(<li>.*<\/li>\n?)+/g, (match) => {
        return '<ul>' + match + '</ul>';
    });
    
    // Line breaks and paragraphs
    html = html.split('\n\n').map(para => {
        if (para.trim() && 
            !para.startsWith('<h') && 
            !para.startsWith('<ul') && 
            !para.startsWith('<li')) {
            return '<p>' + para.replace(/\n/g, '<br>') + '</p>';
        }
        return para;
    }).join('\n');
    
    // Code blocks (if any)
    html = html.replace(/`([^`]+)`/g, '<code>$1</code>');
    
    // Sentiment score highlighting
    html = html.replace(/Score:\s*(-?\d+(?:\.\d+)?)/gi, (match, score) => {
        const scoreNum = parseFloat(score);
        let color = '#94a3b8'; // neutral
        
        if (scoreNum > 3) color = '#10b981'; // positive (green)
        else if (scoreNum < -3) color = '#ef4444'; // negative (red)
        else if (scoreNum > 0) color = '#3b82f6'; // slightly positive (blue)
        else if (scoreNum < 0) color = '#f59e0b'; // slightly negative (orange)
        
        return `Score: <strong style="color: ${color}; font-size: 1.1em;">${score}</strong>`;
    });
    
    return html;
}

// =============================================
// Actions
// =============================================
function resetForm() {
    elements.form.reset();
    elements.articleCountDisplay.textContent = '4';
    elements.resultsSection.classList.add('hidden');
    elements.loadingSection.classList.add('hidden');
    currentResults = null;
    
    // Scroll to form
    document.querySelector('.analysis-section').scrollIntoView({ 
        behavior: 'smooth', 
        block: 'start' 
    });
}

async function copyResults() {
    if (!currentResults) {
        showToast('No results to copy', 'error');
        return;
    }
    
    try {
        const textToCopy = `
SENTIMENT ANALYSIS RESULTS
Topic: ${currentResults.topic}
Articles Analyzed: ${currentResults.articles_analyzed}

${currentResults.analysis}
        `.trim();
        
        await navigator.clipboard.writeText(textToCopy);
        showToast('Results copied to clipboard!', 'success');
    } catch (error) {
        console.error('Copy failed:', error);
        showToast('Failed to copy results', 'error');
    }
}

// =============================================
// Toast Notifications
// =============================================
function showToast(message, type = 'info') {
    elements.toastMessage.textContent = message;
    
    // Update icon color based on type
    const icon = elements.toast.querySelector('.toast-icon');
    const colors = {
        success: '#10b981',
        error: '#ef4444',
        warning: '#f59e0b',
        info: '#3b82f6'
    };
    icon.style.color = colors[type] || colors.info;
    
    // Show toast
    elements.toast.classList.remove('hidden');
    
    // Hide after 3 seconds
    setTimeout(() => {
        elements.toast.classList.add('hidden');
    }, 3000);
}

// =============================================
// Keyboard Shortcuts
// =============================================
document.addEventListener('keydown', (e) => {
    // Ctrl/Cmd + Enter to submit form
    if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
        if (!isAnalyzing && elements.topicInput.value.trim()) {
            elements.form.dispatchEvent(new Event('submit'));
        }
    }
    
    // Escape to reset form (if not analyzing)
    if (e.key === 'Escape' && !isAnalyzing) {
        if (!elements.resultsSection.classList.contains('hidden')) {
            resetForm();
        }
    }
});

// =============================================
// Enhanced Input Validation
// =============================================
elements.topicInput.addEventListener('input', (e) => {
    const value = e.target.value;
    
    // Remove leading spaces
    if (value.startsWith(' ')) {
        e.target.value = value.trimStart();
    }
});

// =============================================
// Auto-save last topic (optional enhancement)
// =============================================
const STORAGE_KEY = 'sentiment_ai_last_topic';

// Load last topic on page load
const lastTopic = localStorage.getItem(STORAGE_KEY);
if (lastTopic && elements.topicInput) {
    // Don't auto-fill, but could show as suggestion
    elements.topicInput.placeholder = `e.g., ${lastTopic}`;
}

// Save topic when form is submitted
elements.form.addEventListener('submit', () => {
    const topic = elements.topicInput.value.trim();
    if (topic) {
        localStorage.setItem(STORAGE_KEY, topic);
    }
});
